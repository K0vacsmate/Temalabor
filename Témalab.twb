<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20201.20.0427.1803                               -->
<workbook source-build='2020.1.3 (20201.20.0427.1803)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='gains' inline='true' name='federated.0fbxz3m1e5ctah1ga7ml70wrnb5x' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='gains' name='textscan.0rkk02o165a60b1fpl2l4098goci'>
            <connection class='textscan' directory='C:/Users/kovac/TÃ©malab' filename='gains.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.0rkk02o165a60b1fpl2l4098goci' name='gains.csv' table='[gains#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='date' name='Date' ordinal='0' />
            <column datatype='real' name='Apple' ordinal='1' />
            <column datatype='real' name='Adobe' ordinal='2' />
            <column datatype='real' name='AMD' ordinal='3' />
            <column datatype='real' name='Amazon' ordinal='4' />
            <column datatype='real' name='DELL' ordinal='5' />
            <column datatype='real' name='Facebook' ordinal='6' />
            <column datatype='real' name='Alphabet' ordinal='7' />
            <column datatype='real' name='Intel' ordinal='8' />
            <column datatype='real' name='Lenovo' ordinal='9' />
            <column datatype='real' name='Microsoft' ordinal='10' />
            <column datatype='real' name='Netflix' ordinal='11' />
            <column datatype='real' name='NVIDIA' ordinal='12' />
            <column datatype='real' name='Qualcomm' ordinal='13' />
            <column datatype='real' name='AT&amp;T' ordinal='14' />
            <column datatype='real' name='Verizon' ordinal='15' />
            <column datatype='real' name='mean' ordinal='16' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[gains.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Date]</local-name>
            <parent-name>[gains.csv]</parent-name>
            <remote-alias>Date</remote-alias>
            <ordinal>0</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Apple</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Apple]</local-name>
            <parent-name>[gains.csv]</parent-name>
            <remote-alias>Apple</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Adobe</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Adobe]</local-name>
            <parent-name>[gains.csv]</parent-name>
            <remote-alias>Adobe</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>AMD</remote-name>
            <remote-type>5</remote-type>
            <local-name>[AMD]</local-name>
            <parent-name>[gains.csv]</parent-name>
            <remote-alias>AMD</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Amazon</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Amazon]</local-name>
            <parent-name>[gains.csv]</parent-name>
            <remote-alias>Amazon</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DELL</remote-name>
            <remote-type>5</remote-type>
            <local-name>[DELL]</local-name>
            <parent-name>[gains.csv]</parent-name>
            <remote-alias>DELL</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Facebook</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Facebook]</local-name>
            <parent-name>[gains.csv]</parent-name>
            <remote-alias>Facebook</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Alphabet</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Alphabet]</local-name>
            <parent-name>[gains.csv]</parent-name>
            <remote-alias>Alphabet</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Intel</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Intel]</local-name>
            <parent-name>[gains.csv]</parent-name>
            <remote-alias>Intel</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Lenovo</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Lenovo]</local-name>
            <parent-name>[gains.csv]</parent-name>
            <remote-alias>Lenovo</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Microsoft</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Microsoft]</local-name>
            <parent-name>[gains.csv]</parent-name>
            <remote-alias>Microsoft</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Netflix</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Netflix]</local-name>
            <parent-name>[gains.csv]</parent-name>
            <remote-alias>Netflix</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NVIDIA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[NVIDIA]</local-name>
            <parent-name>[gains.csv]</parent-name>
            <remote-alias>NVIDIA</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Qualcomm</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Qualcomm]</local-name>
            <parent-name>[gains.csv]</parent-name>
            <remote-alias>Qualcomm</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>AT&amp;T</remote-name>
            <remote-type>5</remote-type>
            <local-name>[AT&amp;T]</local-name>
            <parent-name>[gains.csv]</parent-name>
            <remote-alias>AT&amp;T</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Verizon</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Verizon]</local-name>
            <parent-name>[gains.csv]</parent-name>
            <remote-alias>Verizon</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>mean</remote-name>
            <remote-type>5</remote-type>
            <local-name>[mean]</local-name>
            <parent-name>[gains.csv]</parent-name>
            <remote-alias>mean</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' name='[AMD]' role='measure' type='quantitative' />
      <column datatype='real' name='[AT&amp;T]' role='measure' type='quantitative' />
      <column datatype='real' name='[Adobe]' role='measure' type='quantitative' />
      <column datatype='real' name='[Alphabet]' role='measure' type='quantitative' />
      <column datatype='real' name='[Amazon]' role='measure' type='quantitative' />
      <column datatype='real' name='[Apple]' role='measure' type='quantitative' />
      <column caption='Dell' datatype='real' name='[DELL]' role='measure' type='quantitative' />
      <column datatype='real' name='[Facebook]' role='measure' type='quantitative' />
      <column datatype='real' name='[Intel]' role='measure' type='quantitative' />
      <column datatype='real' name='[Lenovo]' role='measure' type='quantitative' />
      <column datatype='real' name='[Microsoft]' role='measure' type='quantitative' />
      <column datatype='real' name='[NVIDIA]' role='measure' type='quantitative' />
      <column datatype='real' name='[Netflix]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' name='[Qualcomm]' role='measure' type='quantitative' />
      <column datatype='real' name='[Verizon]' role='measure' type='quantitative' />
      <column caption='Mean' datatype='real' name='[mean]' role='measure' type='quantitative' />
      <column-instance column='[AMD]' derivation='Sum' name='[sum:AMD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[AT&amp;T]' derivation='Sum' name='[sum:AT&amp;T:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Adobe]' derivation='Sum' name='[sum:Adobe:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Alphabet]' derivation='Sum' name='[sum:Alphabet:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Amazon]' derivation='Sum' name='[sum:Amazon:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Apple]' derivation='Sum' name='[sum:Apple:qk]' pivot='key' type='quantitative' />
      <column-instance column='[DELL]' derivation='Sum' name='[sum:DELL:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Facebook]' derivation='Sum' name='[sum:Facebook:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Intel]' derivation='Sum' name='[sum:Intel:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Lenovo]' derivation='Sum' name='[sum:Lenovo:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Microsoft]' derivation='Sum' name='[sum:Microsoft:qk]' pivot='key' type='quantitative' />
      <column-instance column='[NVIDIA]' derivation='Sum' name='[sum:NVIDIA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Netflix]' derivation='Sum' name='[sum:Netflix:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Qualcomm]' derivation='Sum' name='[sum:Qualcomm:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Verizon]' derivation='Sum' name='[sum:Verizon:qk]' pivot='key' type='quantitative' />
      <column-instance column='[mean]' derivation='Sum' name='[sum:mean:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.108668' measure-ordering='alphabetic' measure-percentage='0.891332' show-structure='true' user-set-layout='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#2a5783'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:mean:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[attr:AAPL:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:ADBE:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Adobe:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Alphabet:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Amazon:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:AMD:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:AMZN:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Apple:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:AT&amp;T:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:DELL:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Facebook:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:FB:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:GOOGL:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:INTC:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Intel:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Lenovo:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:LNVGY:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Microsoft:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:MSFT:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Netflix:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:NFLX:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:NVDA:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:NVIDIA:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:QCOM:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Qualcomm:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:T:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Verizon:qk]&quot;</bucket>
            </map>
            <map to='#b9ddf1'>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:VZ:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Hungary&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='diffs' inline='true' name='federated.00mvs690hxrlt114dc2lr0rkubbl' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='diffs' name='textscan.0m4h4uq1buegyt12caq341sw76hm'>
            <connection class='textscan' directory='C:/Users/kovac/TÃ©malab' filename='diffs.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.0m4h4uq1buegyt12caq341sw76hm' name='diffs.csv' table='[diffs#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='date' name='Date' ordinal='0' />
            <column datatype='real' name='Apple' ordinal='1' />
            <column datatype='real' name='Adobe' ordinal='2' />
            <column datatype='real' name='AMD' ordinal='3' />
            <column datatype='real' name='Amazon' ordinal='4' />
            <column datatype='real' name='DELL' ordinal='5' />
            <column datatype='real' name='Facebook' ordinal='6' />
            <column datatype='real' name='Alphabet' ordinal='7' />
            <column datatype='real' name='Intel' ordinal='8' />
            <column datatype='real' name='Lenovo' ordinal='9' />
            <column datatype='real' name='Microsoft' ordinal='10' />
            <column datatype='real' name='Netflix' ordinal='11' />
            <column datatype='real' name='NVIDIA' ordinal='12' />
            <column datatype='real' name='Qualcomm' ordinal='13' />
            <column datatype='real' name='AT&amp;T' ordinal='14' />
            <column datatype='real' name='Verizon' ordinal='15' />
            <column datatype='real' name='mean' ordinal='16' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[diffs.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Date]</local-name>
            <parent-name>[diffs.csv]</parent-name>
            <remote-alias>Date</remote-alias>
            <ordinal>0</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Apple</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Apple]</local-name>
            <parent-name>[diffs.csv]</parent-name>
            <remote-alias>Apple</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Adobe</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Adobe]</local-name>
            <parent-name>[diffs.csv]</parent-name>
            <remote-alias>Adobe</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>AMD</remote-name>
            <remote-type>5</remote-type>
            <local-name>[AMD]</local-name>
            <parent-name>[diffs.csv]</parent-name>
            <remote-alias>AMD</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Amazon</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Amazon]</local-name>
            <parent-name>[diffs.csv]</parent-name>
            <remote-alias>Amazon</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DELL</remote-name>
            <remote-type>5</remote-type>
            <local-name>[DELL]</local-name>
            <parent-name>[diffs.csv]</parent-name>
            <remote-alias>DELL</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Facebook</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Facebook]</local-name>
            <parent-name>[diffs.csv]</parent-name>
            <remote-alias>Facebook</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Alphabet</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Alphabet]</local-name>
            <parent-name>[diffs.csv]</parent-name>
            <remote-alias>Alphabet</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Intel</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Intel]</local-name>
            <parent-name>[diffs.csv]</parent-name>
            <remote-alias>Intel</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Lenovo</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Lenovo]</local-name>
            <parent-name>[diffs.csv]</parent-name>
            <remote-alias>Lenovo</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Microsoft</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Microsoft]</local-name>
            <parent-name>[diffs.csv]</parent-name>
            <remote-alias>Microsoft</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Netflix</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Netflix]</local-name>
            <parent-name>[diffs.csv]</parent-name>
            <remote-alias>Netflix</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NVIDIA</remote-name>
            <remote-type>5</remote-type>
            <local-name>[NVIDIA]</local-name>
            <parent-name>[diffs.csv]</parent-name>
            <remote-alias>NVIDIA</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Qualcomm</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Qualcomm]</local-name>
            <parent-name>[diffs.csv]</parent-name>
            <remote-alias>Qualcomm</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>AT&amp;T</remote-name>
            <remote-type>5</remote-type>
            <local-name>[AT&amp;T]</local-name>
            <parent-name>[diffs.csv]</parent-name>
            <remote-alias>AT&amp;T</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Verizon</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Verizon]</local-name>
            <parent-name>[diffs.csv]</parent-name>
            <remote-alias>Verizon</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>mean</remote-name>
            <remote-type>5</remote-type>
            <local-name>[mean]</local-name>
            <parent-name>[diffs.csv]</parent-name>
            <remote-alias>mean</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' name='[AMD]' role='measure' type='quantitative' />
      <column datatype='real' name='[AT&amp;T]' role='measure' type='quantitative' />
      <column datatype='real' name='[Adobe]' role='measure' type='quantitative' />
      <column datatype='real' name='[Alphabet]' role='measure' type='quantitative' />
      <column datatype='real' name='[Amazon]' role='measure' type='quantitative' />
      <column datatype='real' name='[Apple]' role='measure' type='quantitative' />
      <column caption='Dell' datatype='real' name='[DELL]' role='measure' type='quantitative' />
      <column datatype='real' name='[Facebook]' role='measure' type='quantitative' />
      <column datatype='real' name='[Intel]' role='measure' type='quantitative' />
      <column datatype='real' name='[Lenovo]' role='measure' type='quantitative' />
      <column datatype='real' name='[Microsoft]' role='measure' type='quantitative' />
      <column datatype='real' name='[NVIDIA]' role='measure' type='quantitative' />
      <column datatype='real' name='[Netflix]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' name='[Qualcomm]' role='measure' type='quantitative' />
      <column datatype='real' name='[Verizon]' role='measure' type='quantitative' />
      <column caption='Mean' datatype='real' name='[mean]' role='measure' type='quantitative' />
      <column-instance column='[AMD]' derivation='Sum' name='[sum:AMD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[AT&amp;T]' derivation='Sum' name='[sum:AT&amp;T:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Adobe]' derivation='Sum' name='[sum:Adobe:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Alphabet]' derivation='Sum' name='[sum:Alphabet:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Amazon]' derivation='Sum' name='[sum:Amazon:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Apple]' derivation='Sum' name='[sum:Apple:qk]' pivot='key' type='quantitative' />
      <column-instance column='[DELL]' derivation='Sum' name='[sum:DELL:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Facebook]' derivation='Sum' name='[sum:Facebook:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Intel]' derivation='Sum' name='[sum:Intel:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Lenovo]' derivation='Sum' name='[sum:Lenovo:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Microsoft]' derivation='Sum' name='[sum:Microsoft:qk]' pivot='key' type='quantitative' />
      <column-instance column='[NVIDIA]' derivation='Sum' name='[sum:NVIDIA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Netflix]' derivation='Sum' name='[sum:Netflix:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Qualcomm]' derivation='Sum' name='[sum:Qualcomm:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Verizon]' derivation='Sum' name='[sum:Verizon:qk]' pivot='key' type='quantitative' />
      <column-instance column='[mean]' derivation='Sum' name='[sum:mean:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.282018' measure-ordering='alphabetic' measure-percentage='0.717982' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Intel:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:AMD:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Amazon:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Netflix:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Lenovo:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Apple:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Adobe:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:AT&amp;T:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:NVIDIA:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Qualcomm:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:mean:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Facebook:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:DELL:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Verizon:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Microsoft:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Alphabet:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Hungary&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Napi Ã¡tlag'>
      <table>
        <view>
          <datasources>
            <datasource caption='gains' name='federated.0fbxz3m1e5ctah1ga7ml70wrnb5x' />
          </datasources>
          <datasource-dependencies datasource='federated.0fbxz3m1e5ctah1ga7ml70wrnb5x'>
            <column datatype='real' name='[AMD]' role='measure' type='quantitative' />
            <column datatype='real' name='[AT&amp;T]' role='measure' type='quantitative' />
            <column datatype='real' name='[Adobe]' role='measure' type='quantitative' />
            <column datatype='real' name='[Alphabet]' role='measure' type='quantitative' />
            <column datatype='real' name='[Amazon]' role='measure' type='quantitative' />
            <column datatype='real' name='[Apple]' role='measure' type='quantitative' />
            <column caption='Dell' datatype='real' name='[DELL]' role='measure' type='quantitative' />
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='real' name='[Facebook]' role='measure' type='quantitative' />
            <column datatype='real' name='[Intel]' role='measure' type='quantitative' />
            <column datatype='real' name='[Lenovo]' role='measure' type='quantitative' />
            <column datatype='real' name='[Microsoft]' role='measure' type='quantitative' />
            <column datatype='real' name='[NVIDIA]' role='measure' type='quantitative' />
            <column datatype='real' name='[Netflix]' role='measure' type='quantitative' />
            <column datatype='real' name='[Qualcomm]' role='measure' type='quantitative' />
            <column datatype='real' name='[Verizon]' role='measure' type='quantitative' />
            <column caption='Mean' datatype='real' name='[mean]' role='measure' type='quantitative' />
            <column-instance column='[AMD]' derivation='Sum' name='[sum:AMD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[AT&amp;T]' derivation='Sum' name='[sum:AT&amp;T:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Adobe]' derivation='Sum' name='[sum:Adobe:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Alphabet]' derivation='Sum' name='[sum:Alphabet:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Amazon]' derivation='Sum' name='[sum:Amazon:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Apple]' derivation='Sum' name='[sum:Apple:qk]' pivot='key' type='quantitative' />
            <column-instance column='[DELL]' derivation='Sum' name='[sum:DELL:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Facebook]' derivation='Sum' name='[sum:Facebook:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Intel]' derivation='Sum' name='[sum:Intel:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Lenovo]' derivation='Sum' name='[sum:Lenovo:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Microsoft]' derivation='Sum' name='[sum:Microsoft:qk]' pivot='key' type='quantitative' />
            <column-instance column='[NVIDIA]' derivation='Sum' name='[sum:NVIDIA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Netflix]' derivation='Sum' name='[sum:Netflix:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Qualcomm]' derivation='Sum' name='[sum:Qualcomm:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Verizon]' derivation='Sum' name='[sum:Verizon:qk]' pivot='key' type='quantitative' />
            <column-instance column='[mean]' derivation='Sum' name='[sum:mean:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Adobe:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Alphabet:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Amazon:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Apple:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:AT&amp;T:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Facebook:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Intel:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Lenovo:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Microsoft:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Netflix:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:NVIDIA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Qualcomm:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Verizon:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:AMD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:DELL:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:mean:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:mean:qk]&quot;</bucket>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Adobe:qk]&quot;</bucket>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Alphabet:qk]&quot;</bucket>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Amazon:qk]&quot;</bucket>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Apple:qk]&quot;</bucket>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:AT&amp;T:qk]&quot;</bucket>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Facebook:qk]&quot;</bucket>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Intel:qk]&quot;</bucket>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Lenovo:qk]&quot;</bucket>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Microsoft:qk]&quot;</bucket>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Netflix:qk]&quot;</bucket>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:NVIDIA:qk]&quot;</bucket>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Qualcomm:qk]&quot;</bucket>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:Verizon:qk]&quot;</bucket>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:AMD:qk]&quot;</bucket>
              <bucket>&quot;[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[sum:DELL:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[Multiple Values]</rows>
        <cols>[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[tdy:Date:qk]</cols>
      </table>
      <simple-id uuid='{C92CF72B-9D25-464E-85DC-DC61D91D6C69}' />
    </worksheet>
    <worksheet name='ÃtlagtÃ³l valÃ³ eltÃ©rÃ©s'>
      <table>
        <view>
          <datasources>
            <datasource caption='diffs' name='federated.00mvs690hxrlt114dc2lr0rkubbl' />
          </datasources>
          <datasource-dependencies datasource='federated.00mvs690hxrlt114dc2lr0rkubbl'>
            <column datatype='real' name='[AMD]' role='measure' type='quantitative' />
            <column datatype='real' name='[AT&amp;T]' role='measure' type='quantitative' />
            <column datatype='real' name='[Adobe]' role='measure' type='quantitative' />
            <column datatype='real' name='[Alphabet]' role='measure' type='quantitative' />
            <column datatype='real' name='[Amazon]' role='measure' type='quantitative' />
            <column datatype='real' name='[Apple]' role='measure' type='quantitative' />
            <column caption='Dell' datatype='real' name='[DELL]' role='measure' type='quantitative' />
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='real' name='[Facebook]' role='measure' type='quantitative' />
            <column datatype='real' name='[Intel]' role='measure' type='quantitative' />
            <column datatype='real' name='[Lenovo]' role='measure' type='quantitative' />
            <column datatype='real' name='[Microsoft]' role='measure' type='quantitative' />
            <column datatype='real' name='[NVIDIA]' role='measure' type='quantitative' />
            <column datatype='real' name='[Netflix]' role='measure' type='quantitative' />
            <column datatype='real' name='[Qualcomm]' role='measure' type='quantitative' />
            <column datatype='real' name='[Verizon]' role='measure' type='quantitative' />
            <column caption='Mean' datatype='real' name='[mean]' role='measure' type='quantitative' />
            <column-instance column='[AMD]' derivation='Sum' name='[sum:AMD:qk]' pivot='key' type='quantitative' />
            <column-instance column='[AT&amp;T]' derivation='Sum' name='[sum:AT&amp;T:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Adobe]' derivation='Sum' name='[sum:Adobe:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Alphabet]' derivation='Sum' name='[sum:Alphabet:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Amazon]' derivation='Sum' name='[sum:Amazon:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Apple]' derivation='Sum' name='[sum:Apple:qk]' pivot='key' type='quantitative' />
            <column-instance column='[DELL]' derivation='Sum' name='[sum:DELL:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Facebook]' derivation='Sum' name='[sum:Facebook:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Intel]' derivation='Sum' name='[sum:Intel:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Lenovo]' derivation='Sum' name='[sum:Lenovo:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Microsoft]' derivation='Sum' name='[sum:Microsoft:qk]' pivot='key' type='quantitative' />
            <column-instance column='[NVIDIA]' derivation='Sum' name='[sum:NVIDIA:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Netflix]' derivation='Sum' name='[sum:Netflix:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Qualcomm]' derivation='Sum' name='[sum:Qualcomm:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Verizon]' derivation='Sum' name='[sum:Verizon:qk]' pivot='key' type='quantitative' />
            <column-instance column='[mean]' derivation='Sum' name='[sum:mean:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.00mvs690hxrlt114dc2lr0rkubbl].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Adobe:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Alphabet:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Amazon:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Apple:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:AT&amp;T:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Facebook:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Intel:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Lenovo:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Microsoft:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Netflix:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:NVIDIA:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Qualcomm:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Verizon:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:AMD:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:DELL:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:mean:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.00mvs690hxrlt114dc2lr0rkubbl].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Adobe:qk]&quot;</bucket>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Alphabet:qk]&quot;</bucket>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Amazon:qk]&quot;</bucket>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Apple:qk]&quot;</bucket>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:AT&amp;T:qk]&quot;</bucket>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Facebook:qk]&quot;</bucket>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Intel:qk]&quot;</bucket>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Lenovo:qk]&quot;</bucket>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Microsoft:qk]&quot;</bucket>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Netflix:qk]&quot;</bucket>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:NVIDIA:qk]&quot;</bucket>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Qualcomm:qk]&quot;</bucket>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:Verizon:qk]&quot;</bucket>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:AMD:qk]&quot;</bucket>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:DELL:qk]&quot;</bucket>
              <bucket>&quot;[federated.00mvs690hxrlt114dc2lr0rkubbl].[sum:mean:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.00mvs690hxrlt114dc2lr0rkubbl].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.00mvs690hxrlt114dc2lr0rkubbl].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.00mvs690hxrlt114dc2lr0rkubbl].[Multiple Values]</rows>
        <cols>[federated.00mvs690hxrlt114dc2lr0rkubbl].[tdy:Date:qk]</cols>
      </table>
      <simple-id uuid='{3DA56F08-FAFF-485D-AEFB-A50D1C3196E5}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='PrezentÃ¡ciÃ³' type='storyboard'>
      <style />
      <size maxheight='900' maxwidth='1600' minheight='900' minwidth='1600' preset-index='8' sizing-mode='fixed' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='98222' id='1' param='vert' removable='false' type='layout-flow' w='99000' x='500' y='889'>
            <zone h='3667' id='3' type='title' w='99000' x='500' y='889' />
            <zone h='11222' id='4' is-fixed='true' paired-zone-id='5' removable='false' type='flipboard-nav' w='99000' x='500' y='4556' />
            <zone h='83333' id='5' paired-zone-id='4' removable='false' type='flipboard' w='99000' x='500' y='15778'>
              <flipboard active-id='1' nav-type='caption' show-nav-arrows='true'>
                <story-points>
                  <story-point caption='Napi Ã¡tlag vÃ¡ltozÃ¡s' captured-sheet='Napi Ã¡tlag' id='1' />
                  <story-point caption='Napi Ã¡tlagtÃ³lvalÃ³ eltÃ©rÃ©s' captured-sheet='ÃtlagtÃ³l valÃ³ eltÃ©rÃ©s' id='2' />
                </story-points>
              </flipboard>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <simple-id uuid='{49326595-C85D-4476-8DBB-00AB3C16C3DE}' />
    </dashboard>
  </dashboards>
  <windows source-height='51'>
    <window class='worksheet' name='Napi Ã¡tlag'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight field='[federated.0fbxz3m1e5ctah1ga7ml70wrnb5x].[:Measure Names]'>
          <bucket-selection />
        </highlight>
      </viewpoint>
      <simple-id uuid='{16B93AA4-C392-4946-AB63-208A4EF642B0}' />
    </window>
    <window class='worksheet' name='ÃtlagtÃ³l valÃ³ eltÃ©rÃ©s'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.00mvs690hxrlt114dc2lr0rkubbl].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{6BD3E67B-650D-4A7F-82D1-2B4812A8FBEE}' />
    </window>
    <window class='dashboard' maximized='true' name='PrezentÃ¡ciÃ³'>
      <viewpoints />
      <active id='-1' />
      <simple-id uuid='{ADF8B51A-709E-4473-87BA-109677252BAF}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Napi Ã¡tlag' width='192'>
      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
      gP8DGBBe1soeQY8AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='PrezentÃ¡ciÃ³' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
